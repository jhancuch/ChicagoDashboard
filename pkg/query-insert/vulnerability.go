// Function to query Chicago Open Data API for COVID-19 Vulnerability Index and insert into PostgreSQL database

package queryInsert

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"

	pq "github.com/lib/pq"
)

// Create struct to insert API request results
type VulnerabilityTemp []struct {
	GeographyType                    string `json:"geography_type"`
	CommunityAreaOrZip               string `json:"community_area_or_zip"`
	CommunityAreaName                string `json:"community_area_name"`
	CcviScore                        string `json:"ccvi_score"`
	CcviCategory                     string `json:"ccvi_category"`
	RankSocioeconomicStatus          string `json:"rank_socioeconomic_status"`
	RankHouseholdComposition         string `json:"rank_household_composition"`
	RankAdultsNoPcp                  string `json:"rank_adults_no_pcp"`
	RankCumulativeMobilityRatio      string `json:"rank_cumulative_mobility_ratio"`
	RankFrontlineEssentialWorkers    string `json:"rank_frontline_essential_workers"`
	RankAge65Plus                    string `json:"rank_age_65_plus"`
	RankComorbidConditions           string `json:"rank_comorbid_conditions"`
	RankCovid19IncidenceRate         string `json:"rank_covid_19_incidence_rate"`
	RankCovid19HospitalAdmissionRate string `json:"rank_covid_19_hospital_admission_rate"`
	RankCovid19CrudeMortalityRate    string `json:"rank_covid_19_crude_mortality_rate"`
}

func QueryInsertVulnerability() {

	// Query from the API
	resp, err := http.Get("https://data.cityofchicago.org/resource/xhc6-88s9.json")
	CheckError(err)
	defer resp.Body.Close()

	// Convert response into bytes
	body, err := ioutil.ReadAll(resp.Body)
	CheckError(err)

	// Unmarshal response in bytes into struct
	var queryResult VulnerabilityTemp
	if err := json.Unmarshal(body, &queryResult); err != nil {
		fmt.Println("Can not unmarshal JSON")
	}

	// Set PostgreSQL arguments
	psqlconn := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", host, port, user, password, dbname)

	// open database
	db, err := sql.Open("postgres", psqlconn)
	CheckError(err)

	// close database once the other statements below execute
	defer db.Close()

	// delete previous data so the table will only contain the most recent data
	_, err = db.Exec(`DELETE FROM "vulnerability"`)
	CheckError(err)

	// the following lines allow for a bulk insert
	txn, err := db.Begin()
	if err != nil {
		log.Fatal(err)
	}

	stmt, err := txn.Prepare(pq.CopyIn("vulnerability", "geography_type", "community_area_or_zip",
		"community_area_name", "ccvi_score", "ccvi_category", "rank_socioeconomic_status", "rank_household_composition",
		"rank_adults_no_pcp", "rank_cumulative_mobility_ratio", "rank_frontline_essential_workers", "rank_age_65_plus",
		"rank_comorbid_conditions", "rank_covid_19_incidence_rate", "rank_covid_19_hospital_admission_rate",
		"rank_covid_19_crude_mortality_rate"))
	if err != nil {
		log.Fatal(err)
	}

	for _, result := range queryResult {
		_, err = stmt.Exec(result.GeographyType, result.CommunityAreaOrZip, result.CommunityAreaName, result.CcviScore, result.CcviCategory, result.RankSocioeconomicStatus,
			result.RankHouseholdComposition, result.RankAdultsNoPcp, result.RankCumulativeMobilityRatio, result.RankFrontlineEssentialWorkers, result.RankAge65Plus,
			result.RankComorbidConditions, result.RankCovid19IncidenceRate, result.RankCovid19HospitalAdmissionRate, result.RankCovid19CrudeMortalityRate)
		if err != nil {
			log.Fatal(err)
		}
	}

	_, err = stmt.Exec()
	if err != nil {
		log.Fatal(err)
	}

	err = stmt.Close()
	if err != nil {
		log.Fatal(err)
	}

	err = txn.Commit()
	if err != nil {
		log.Fatal(err)
	}

}
